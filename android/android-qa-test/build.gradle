apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "com.android.qatest"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 2
        versionName "1.1.03131130"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        externalNativeBuild {
            cmake {
                abiFilters 'armeabi-v7a','x86'//, 'x86_64', 'armeabi',  'arm64-v8a'
                //cppFlags ""
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {

        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }

        debug {
            storeFile file(MYAPP_DEBUG_STORE_FILE)
            keyAlias MYAPP_DEBUG_KEY_ALIAS
            storePassword MYAPP_DEBUG_STORE_PASSWORD
            keyPassword MYAPP_DEBUG_KEY_PASSWORD
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    //使用cmake编译ndk
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}



// 依赖插件脚本
//apply from: 'tinker-support.gradle'

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])

    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.android.support:support-annotations:25.0.0'

    //
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    // 多dex配置，Dalvik 可执行文件分包，用于Instant Run,Tinker
    //support multidex
    compile 'com.android.support:multidex:1.0.1'

    //loginActivity used
    compile 'com.android.support:design:25.0.0'

    /***************************************************
     *                                                 *
     *                                                 *
     *                  Native 依赖库                   *
     *                                                 *
     *                                                 *
     *                                                 *
     ***************************************************/
    //bugly upgrade and tinker native hotFix module.
    compile project(':android-upgrade-module')

    //日志系统
    compile project(':android-log-module')
    //https://github.com/orhanobut/logger
    compile 'com.orhanobut:logger:2.1.1'

    compile project(':android-http-module')

    compile project(':android-viewpager-indicator')

    //Pay Module
    compile project(path: ':android-pay-module')

    compile project(path: ':react-native-module')

    //verticalViewPager
    compile 'me.kaelaela:verticalviewpager:1.0.0@aar'


    compile 'com.youth.banner:banner:1.4.9'  //最新版本

    //Android平台的导航控件@https://github.com/HomHomLin/AdvancedPagerSlidingTabStrip
    compile 'homhomlin.lib:apsts:1.8.0'

    //StatusBarUtil 状态栏工具类（实现沉浸式状态栏/变色状态栏）
    //https://github.com/laobie/StatusBarUtil
    compile 'com.jaeger.statusbaruitl:library:1.3.6'

    //Android Activity 滑动返回https://github.com/bingoogolapple/BGASwipeBackLayout-Android
    compile 'cn.bingoogolapple:bga-swipebacklayout:1.0.8@aar'

    //Android developers should collect the following utils(updating)
    //https://github.com/kinshasa/AndroidUtilCode
    compile 'com.blankj:utilcode:1.3.6'

    // Android 万能的Adapter for ListView,RecyclerView,GridView等，支持多种Item类型的情况。
    // https://github.com/hongyangAndroid/baseAdapter
    compile 'com.zhy:base-rvadapter:3.0.3'
    compile 'com.zhy:base-adapter:3.0.3'

    // Android屏幕适配方案，直接填写设计图上的像素尺寸即可完成适配。
    // http://blog.csdn.net/lmj623565791/article/details/45460089
    // https://github.com/hongyangAndroid/AndroidAutoLayout
    compile 'com.zhy:autolayout:1.4.5'

    // Android流式布局，支持单选、多选等，适合用于产品标签等。
    // https://github.com/hongyangAndroid/FlowLayout
    compile 'com.zhy:flowlayout-lib:1.0.3'

    //https://github.com/JakeWharton/butterknife
    compile 'com.jakewharton:butterknife:8.6.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'

    //原生JOSN解析
    compile 'com.alibaba:fastjson:1.1.58.android'

    //内存泄漏工具LeakCanary@https://github.com/square/leakcanary
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'


    /** Fresco from facebook @https://github.com/facebook/fresco**/

    //facebook Fresco. react需要0.11.0版本 最新1.3版本不支持
    compile 'com.facebook.fresco:fresco:0.11.0'

    // 在 API < 14 上的机器支持 WebP 时，需要添加
    compile 'com.facebook.fresco:animated-base-support:0.11.0'

    // 支持 GIF 动图，需要添加 1.3
    compile 'com.facebook.fresco:animated-gif:0.11.0'

    // 支持 WebP 动图 1.3
    compile 'com.facebook.fresco:animated-webp:0.11.0'
    // 支持 WebP 静态图
    compile 'com.facebook.fresco:webpsupport:0.11.0'

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
