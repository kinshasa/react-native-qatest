apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "com.android.qatest"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 2
        versionName "1.1.03131130"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {

        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }

        debug {
            storeFile file(MYAPP_DEBUG_STORE_FILE)
            keyAlias MYAPP_DEBUG_KEY_ALIAS
            storePassword MYAPP_DEBUG_STORE_PASSWORD
            keyPassword MYAPP_DEBUG_KEY_PASSWORD
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

apply from: "../../node_modules/react-native/react.gradle"

project.ext.vectoricons = [
        iconFontNames: ['MaterialIcons.ttf', 'EvilIcons.ttf'] // Name of the font files you want to copy
]

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

// 依赖插件脚本
//apply from: 'tinker-support.gradle'

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])

    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.facebook.react:react-native:+'

    //
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    // 多dex配置
    //support multidex
    compile 'com.android.support:multidex:1.0.1'

    //loginActivity used
    compile 'com.android.support:design:25.2.0'

    // From node_modules
    compile project(':react-native-vector-icons')
    //A collection of animated loading indicators for React Native
    //@https://github.com/maxs15/react-native-spinkit
    compile project(':react-native-spinkit')

    //bugly upgrade and tinker native hotFix module.
    compile project(':android-upgrade-module')

    //react-native-pushy
    compile project(':react-native-update')

    compile project(':android-log-module')

    compile project(':android-http-module')

    //verticalViewPager
    compile 'me.kaelaela:verticalviewpager:1.0.0@aar'

    //Android平台的导航控件@https://github.com/HomHomLin/AdvancedPagerSlidingTabStrip
    compile 'homhomlin.lib:apsts:1.8.0'

    //StatusBarUtil 状态栏工具类（实现沉浸式状态栏/变色状态栏）
    //https://github.com/laobie/StatusBarUtil
//    compile 'com.jaeger.statusbaruitl:library:1.3.6'

    //PageIndicatorView will simplify your life while you working with Android ViewPager and need to indicate selected page. It's easy to setup and customize as you need with run-time preview rendering.
    //https://github.com/romandanylyk/PageIndicatorView
    compile 'com.romandanylyk:pageindicatorview:0.1.2'
    compile 'com.android.support:support-annotations:25.3.0'
    compile 'com.android.support:support-compat:25.3.0'
    compile 'com.android.support:support-core-ui:25.3.0'

    /** Fresco from facebook @https://github.com/facebook/fresco. add by@liusp@gagc.com.cn  **/
    //If your app supports Android versions before Ice Cream Sandwich (API level 14)
    //compile 'com.facebook.fresco:animated-base-support:0.10.0'
    //For animated GIF support
    //compile 'com.facebook.fresco:animated-gif:0.10.0'
    ////facebook picture load.
    //compile 'com.facebook.fresco:fresco:0.10.0'


    //Android developers should collect the following utils(updating)
    //https://github.com/kinshasa/AndroidUtilCode
    compile 'com.blankj:utilcode:1.3.6'


    //https://github.com/JakeWharton/butterknife
    compile 'com.jakewharton:butterknife:8.6.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'

    compile project(path: ':android-pay-module')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
